<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式ID的实现方案</title>
    <url>/2025/01/20/%E5%88%86%E5%B8%83%E5%BC%8FID%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="分布式ID的实现方案"><a href="#分布式ID的实现方案" class="headerlink" title="分布式ID的实现方案"></a>分布式ID的实现方案</h2><h3 id="1-什么是分布式ID"><a href="#1-什么是分布式ID" class="headerlink" title="1. 什么是分布式ID"></a>1. 什么是分布式ID</h3><p>​	对于低访问量的系统来说，无需对数据库进行分库分表，单库单表完全可以应对，但是随着系统访问量的上升，单表单库的访问压力逐渐增大，这时候就需要采用分库分表的方案，来缓解压力。</p>
<p>​	在实际的业务场景中，我们常常需要一个唯一ID来确保数据的唯一性，对于单表单库来说，我们通常采用自增ID来作为标识，但是分库分表之后，自增ID的唯一性就无法保证。</p>
<img src="https://technology-sharing-1258823864.cos.ap-shanghai.myqcloud.com/image/%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258FID%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E6%25A1%2588-01.png" alt="分布式ID的实现方案-01" style="zoom: 33%;" />

<p>​	如上图所示，同一业务下的3张数据表，可能存在相同的ID，导致无法根据ID来确保数据的唯一性，因此，在分库分表的架构中，我们就需要使用分布式ID，来确保同一业务下的多张数据表或者多张数据库，数据的唯一性。</p>
<h3 id="2-分布式ID的实现方案"><a href="#2-分布式ID的实现方案" class="headerlink" title="2. 分布式ID的实现方案"></a>2. 分布式ID的实现方案</h3><h4 id="1-基于UUID生成"><a href="#1-基于UUID生成" class="headerlink" title="1. 基于UUID生成"></a>1. 基于UUID生成</h4><p>​	UUID是一组由32位的16进制数据所构成，所以可以生成16^32个数据，也就是说，平均每纳秒可以生成1兆组数据，约100亿年才可以使用完。</p>
<p>​	UUID的格式为<code>8-4-4-4-12</code>，如：<code>62f51e7e-a3ca-45ab-bf3f-2c3279f2991e</code>，在JDK中，可以通过如下方式生成一组UUID：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">UUID</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID();</span><br><span class="line">    System.out.println(<span class="string">&quot;UUID：&quot;</span> + uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UUID：e27cc5fa-8655-4095-b682-e12d178791dd</p>
</blockquote>
<p>​	虽然UUID的实现方案简单便捷，但是由于其长度较长，在数据库中存储会占用过多资源，并且如果作为主键，由于UUID的无序性，会导致其存储的数据位置频繁变动，对性能影响较大。</p>
<h4 id="2-基于数据库生成"><a href="#2-基于数据库生成" class="headerlink" title="2. 基于数据库生成"></a>2. 基于数据库生成</h4><h5 id="1-基于特定起始值和步长分配ID"><a href="#1-基于特定起始值和步长分配ID" class="headerlink" title="1. 基于特定起始值和步长分配ID"></a>1. 基于特定起始值和步长分配ID</h5><p>​	例如现在分了3张表，分别是table_1、table_2、table_3，那么可以给table_1分配自增ID的起始值是1；为table_2分配自增ID的起始值是2，为table_3分配自增ID的起始值是3，步长均为3，这样同一业务下的这3张表，也可以确保其ID的唯一性。</p>
<blockquote>
<p>以MySQL为例，可以在MySQL的配置文件中，设置自增ID起始值和步长</p>
<p>自增ID起始值：<code>auto_increment_increment = value </code></p>
<p>自增ID步长：<code>auto_increment_offset = value</code></p>
</blockquote>
<img src="https://technology-sharing-1258823864.cos.ap-shanghai.myqcloud.com/image/%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258FID%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E6%25A1%2588-02.png" style="zoom: 33%;" />

<p>​	以上方式，虽然可以实现全局唯一ID的生成，但是该方案高度依赖数据库，一旦数据库发生异常，便直接影响业务，并且在主库发生异常，主从切换不一致时，可能会出现ID重复的异常。</p>
<h5 id="2-基于特定数据表分配ID"><a href="#2-基于特定数据表分配ID" class="headerlink" title="2. 基于特定数据表分配ID"></a>2. 基于特定数据表分配ID</h5><p>​	可以新建一张数据表，专门存放当前最新的ID，每次需要获取ID值时，都将该数据表中的ID自增一次，并返回最新的ID值。</p>
<img src="https://technology-sharing-1258823864.cos.ap-shanghai.myqcloud.com/image/%25E5%2589%25AF%25E6%259C%25AC-%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258FID%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E6%25A1%2588-03.png" alt="副本-分布式ID的实现方案-03" style="zoom: 33%;" />

<p>​	以上方式，同样可以生成全局唯一ID，但是也同样高度依赖数据库，在进行实际的业务场景中，增加了一次与业务无关的读写操作，在高并发场景下，ID数据表的压力很大，对系统的QPS影响较大，并且当数据库发生异常时，也会直接影响原有的业务执行。</p>
<h4 id="3-基于Redis生成"><a href="#3-基于Redis生成" class="headerlink" title="3. 基于Redis生成"></a>3. 基于Redis生成</h4><p>​	可以通过Redis的<code>INCR</code>和<code>INCRBY</code>指令来实行分布式ID的生成，每次请求时，都从Redis中获取一次分布式ID。</p>
<img src="https://technology-sharing-1258823864.cos.ap-shanghai.myqcloud.com/image/%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258FID%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E6%25A1%2588-04.png" alt="分布式ID的实现方案-04" style="zoom: 33%;" />

<p>​	当QPS较小时，此种方案可以应对，但是对于高并发场景，此种方案对于单台Redis服务器的性能要求较高，因此，需要搭建Redis集群，来缓解单台Redis服务器的压力，但是对于Redis集群来说，分布式ID的生成又会出现MySQL集群出现的问题，并且此种方案同样高度依赖Redis，一旦Redis服务器出现异常，就会影响到整个业务流程，同时此种方案引入了Redis中间件，增加了系统的复杂度。</p>
<h4 id="4-基于雪花算法生成"><a href="#4-基于雪花算法生成" class="headerlink" title="4. 基于雪花算法生成"></a>4. 基于雪花算法生成</h4><p>​	雪花算法是由Twitter开源的一个分布式ID生成的解决方案，该分布式ID总共占用<code>64bit</code>存储空间，对于Java来说，正好使用<code>long</code>类型来进行存储。</p>
<blockquote>
<p><code>第1位</code>：始终是0，可以看做是符号位，不使用。</p>
<p><code>第2-42位</code>：总共41位，表示时间戳，单位是毫秒，总共可以表示2^41个数字，即69年的时间。</p>
<p><code>第43-52位</code>：总共10位，表示机器数，总共可以表示2^10&#x3D;1024台机器，通常情况下，不需要部署这么多台机器，因此，一般将前5位表示数据中心，后5位表示机器数，即总共可以表示32个数据中心，每个数据中心有32台机器。</p>
<p><code>第53-64位</code>：总共12位，表示自增序列，可以表示2^12&#x3D;4096个数。</p>
</blockquote>
<p>​	这样划分之后，相当于在1ms之内，一个数据中心的一台服务器中，可以产生4096个不重复的有序ID。</p>
<img src="https://technology-sharing-1258823864.cos.ap-shanghai.myqcloud.com/image/%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258FID%25E7%259A%2584%25E5%25AE%259E%25E7%258E%25B0%25E6%2596%25B9%25E6%25A1%2588-05.png" alt="分布式ID的实现方案-05" style="zoom: 33%;" />

<p>​	具体的Java代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 雪花算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 天天向上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Snowflake</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">START_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1736820033851L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_BIT</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">SEQUENCE_BIT</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器最大值 1023</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_MACHINE_NUM</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号最大值 4095</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_SEQUENCE</span> <span class="operator">=</span> ~(-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器标识向左移动的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MACHINE_LEFT</span> <span class="operator">=</span> SEQUENCE_BIT;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳向左移动的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIMESTAMP_LEFT</span> <span class="operator">=</span> SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> machineId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一次时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastTimeStamp</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machineId 机器ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Snowflake</span><span class="params">(<span class="type">long</span> machineId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;机器ID不能大于&quot;</span> + MAX_MACHINE_NUM + <span class="string">&quot;或者小于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生下一个时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimeStamp 上一次生成的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 下一个时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">nextTimestamp</span><span class="params">(<span class="type">long</span> lastTimeStamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimeStamp) &#123;</span><br><span class="line">            timestamp = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分布式ID</span></span><br><span class="line"><span class="comment">     * 该方法需线程安全，如果在分布式系统中，应该使用分布式锁来保证该方法的线程安全，如果不设置，在高并发场景中，      * 可能会出现多个线程生成同一ID的异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分布式ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimeStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;时钟回拨异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timestamp == lastTimeStamp) &#123;</span><br><span class="line">            <span class="comment">// 相同毫秒内，序列号自增</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">// 同一毫秒的序列数已经达到最大</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                timestamp = nextTimestamp(lastTimeStamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastTimeStamp = timestamp;</span><br><span class="line">        <span class="keyword">return</span> (timestamp - START_TIMESTAMP) &lt;&lt; TIMESTAMP_LEFT | machineId &lt;&lt; MACHINE_LEFT | sequence;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Snowflake</span> <span class="variable">snowflake</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Snowflake</span>(<span class="number">0</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;分布式ID：&quot;</span> + snowflake.nextId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分布式ID：9161748250624</p>
</blockquote>
<p>​	通过雪花算法生成分布式ID，生成的ID是有序递增的，不依赖于第三方系统，在高并发场景下，依然具有良好的性能，相较于UUID方式生成分布式ID，该方式性能更高，占用空间小，且递增有序，可读性更好。</p>
<p>​	但是雪花算法也存在一定的局限性，当系统发生时钟回拨时，该方法就会处于不可用的状态，可以使用百度的UidGenerator或者美团的Leaf规避这一风险，在实际的开发中，可以根据需要，选择合适的方案，来实现分布式ID的生成。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>微服务</tag>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
